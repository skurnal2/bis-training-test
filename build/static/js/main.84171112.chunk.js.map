{"version":3,"sources":["components/Course.js","components/Tools.js","components/Update.js","components/User.js","components/Add.js","components/UsersList.js","images/loader.gif","components/LoadingScreen.js","images/company_logo.png","components/Header.js","components/Footer.js","App.js","index.js"],"names":["Course","handleClose","show","name","course","Modal","onHide","Header","closeButton","Title","Body","Table","striped","bordered","hover","classes","map","courseClass","index","marks","passmarks","className","href","certificate","classname","classid","classcode","style","backgroundColor","ValidateEmail","mail","test","ValidatePhone","phone","match","Update","user","useState","role","city","address","username","id","email","userInfo","setUserInfo","emailError","phoneError","usernameError","roleError","nameError","cityError","addressError","errors","setErrors","errorSetter","errorKey","errorMessage","useEffect","updateUser","usersApiData","setUsersApiData","window","alert","confirm","newUsersList","users","forEach","push","success","UsersDataContext","Consumer","Form","Row","Group","as","Col","controlId","Label","Control","type","readOnly","defaultValue","onChange","e","prevState","target","value","placeholder","Text","Button","variant","onClick","User","setCourse","loadingCourse","setLoadingCourse","setUser","loadingUserUpdate","setLoadingUserUpdate","showCourse","setShowCourse","showUpdate","setShowUpdate","showCourses","a","fetch","result","json","jsonData","fetchCourseData","apiData","filter","setApiData","Add","addUser","usersArray","updatedUsersApiData","UsersList","loadingUserAdd","setLoadingUserAdd","showAdd","setShowAdd","addNewUser","key","LoadingScreen","src","Loader","alt","BisLogo","React","createContext","App","loading","setLoading","fetchUsersApiData","Provider","Footer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84171112.chunk.js","sourcesContent":["import { FaLink } from \"react-icons/fa\";\r\nimport { Modal, Table } from 'react-bootstrap';\r\n\r\nconst Course = ({ handleClose, show, name, course }) => {\r\n\r\n    return (\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>{name} - Courses</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Table striped bordered hover>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Certificate</th>\r\n                            <th>Pass Marks</th>\r\n                            <th>Course Name</th>\r\n                            <th>Marks</th>\r\n                            <th>Course ID</th>\r\n                            <th>Course Code</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {course.classes.map((courseClass, index) => (\r\n\r\n                            courseClass.marks >= courseClass.passmarks ?\r\n                                <tr key={index}>\r\n                                    <td>\r\n                                        <a className=\"btn btn-dark\" href={`http://${courseClass.certificate}`}><FaLink /></a>\r\n                                    </td>\r\n                                    <td>{courseClass.passmarks}</td>\r\n                                    <td>{courseClass.classname}</td>\r\n                                    <td>{courseClass.marks}</td>\r\n                                    <td>{courseClass.classid}</td>\r\n                                    <td>{courseClass.classcode}</td>\r\n                                </tr>\r\n                                :\r\n                                <tr key={index} style={{ backgroundColor: \"#e57373\" }}>\r\n                                    <td>\r\n                                        <a className=\"btn btn-dark\" href={`http://${courseClass.certificate}`}><FaLink /></a>\r\n                                    </td>\r\n                                    <td>{courseClass.passmarks}</td>\r\n                                    <td>{courseClass.classname}</td>\r\n                                    <td>{courseClass.marks}</td>\r\n                                    <td>{courseClass.classid}</td>\r\n                                    <td>{courseClass.classcode}</td>\r\n                                </tr>\r\n                        ))}\r\n                    </tbody>\r\n                </Table>\r\n\r\n            </Modal.Body>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default Course;","//Email Validator Function from W3Resource\r\nexport function ValidateEmail(mail) {\r\n    if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(mail)) {\r\n        return (true)\r\n    }\r\n    return (false)\r\n}\r\n\r\n//Phone Number Validator (North American) from W3Resource\r\nexport function ValidatePhone(phone) {\r\n    var expression = /^(\\+\\d{1,2}\\s)?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}$/;\r\n    if ((phone.match(expression))) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}","import { useState, useEffect } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { UsersDataContext } from '../App';\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\nimport { ValidateEmail, ValidatePhone } from './Tools';\r\n\r\nconst Update = ({ handleClose, show, user }) => {\r\n\r\n    //Initializing user info with values of user passed as props\r\n    const [userInfo, setUserInfo] = useState({\r\n        role: user.role,\r\n        city: user.city,\r\n        address: user.address,\r\n        phone: user.phone,\r\n        username: user.username,\r\n        id: user.id,\r\n        email: user.email,\r\n        name: user.name\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        emailError: '',\r\n        phoneError: '',\r\n        usernameError: '',\r\n        roleError: '',\r\n        nameError: '',\r\n        cityError: '',\r\n        addressError: '',\r\n    });\r\n\r\n    const checkErrors = () => {\r\n        if (errors.emailError || errors.phoneError || errors.usernameError ||\r\n            errors.roleError || errors.nameError || errors.cityError ||\r\n            errors.addressError || errors.addressError) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }    \r\n\r\n    const errorSetter = (errorKey, errorMessage) => {\r\n        setErrors(errors => ({ ...errors, [`${errorKey}`]: errorMessage }));\r\n    }\r\n\r\n    //For Validations\r\n    useEffect(() => {\r\n        if (!userInfo.email) {\r\n            errorSetter(\"emailError\", \"Please provide an Email ID\");\r\n        } else if (userInfo.email && !ValidateEmail(userInfo.email)) {\r\n            errorSetter(\"emailError\", \"Email needs to be in format: mysite@domain.com\");\r\n        } else {\r\n            errorSetter(\"emailError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.phone) {\r\n            errorSetter(\"phoneError\", \"Please provide a Phone Number\");\r\n        } else if (userInfo.phone && !ValidatePhone(userInfo.phone)) {\r\n            errorSetter(\"phoneError\", \"Phone numbers needs to be in format: XXX XXX XXXX (Dashes/Dots/Spaces optional)\");\r\n        } else {\r\n            errorSetter(\"phoneError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.name) {\r\n            errorSetter(\"nameError\", \"Please provide a Name\");\r\n        } else {\r\n            errorSetter(\"nameError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.username) {\r\n            errorSetter(\"usernameError\", \"Please provide a Username\");\r\n        } else {\r\n            errorSetter(\"usernameError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.role) {\r\n            errorSetter(\"roleError\", \"Please provide a Role\");\r\n        } else {\r\n            errorSetter(\"roleError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.city) {\r\n            errorSetter(\"cityError\", \"Please provide a City\");\r\n        } else {\r\n            errorSetter(\"cityError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.address) {\r\n            errorSetter(\"addressError\", \"Please provide an Address\");\r\n        } else {\r\n            errorSetter(\"addressError\", \"\");\r\n        }\r\n    }, [userInfo])\r\n\r\n    const updateUser = (usersApiData, setUsersApiData) => {\r\n        if (!checkErrors()) {\r\n            if (window.confirm(`Are you sure you want to update User: ${user.name} (with Id: ${user.id})?`)) {\r\n                const newUsersList = [];\r\n                usersApiData.users.forEach(user => {\r\n                    if (user.id === userInfo.id) {\r\n                        newUsersList.push(userInfo);\r\n                    } else {\r\n                        newUsersList.push(user);\r\n                    }\r\n                });\r\n\r\n                const updatedUsersApiData = {\r\n                    success: usersApiData.success,\r\n                    users: newUsersList\r\n                }\r\n                setUsersApiData(updatedUsersApiData);\r\n                handleClose();\r\n            }\r\n        } else {\r\n            window.alert(\"Please fix the errors before submitting.\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <UsersDataContext.Consumer>\r\n            {({ usersApiData, setUsersApiData }) => (\r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Edit - {user.name} (Id: {user.id})</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridId\">\r\n                                    <Form.Label>Id</Form.Label>\r\n                                    <Form.Control type=\"text\" readOnly defaultValue={userInfo.id} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        id: e.target.value\r\n                                    }))} />\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridName\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Name\" defaultValue={userInfo.name} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        name: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.nameError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridUsername\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Username\" defaultValue={userInfo.username} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        username: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.usernameError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"Enter Email\" defaultValue={userInfo.email} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        email: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.emailError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPhone\">\r\n                                    <Form.Label>Phone Number</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Phone Number\" defaultValue={userInfo.phone} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        phone: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.phoneError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridAddress\">\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Address\" defaultValue={userInfo.address} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        address: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.addressError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                    <Form.Label>City</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter City\" defaultValue={userInfo.city} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        city: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.cityError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridRole\">\r\n                                    <Form.Label>Role</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Role\" defaultValue={userInfo.role} onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        role: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.roleError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Button variant=\"warning\" onClick={() => updateUser(usersApiData, setUsersApiData)}>Update</Button>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n            )}\r\n        </UsersDataContext.Consumer>\r\n    );\r\n}\r\n\r\nexport default Update;","import { useState } from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport { FaBookOpen, FaTrash, FaUserEdit } from \"react-icons/fa\";\r\nimport Course from './Course';\r\nimport Update from './Update';\r\n\r\nimport { UsersDataContext } from '../App';\r\n\r\nconst User = ({ value }) => {\r\n\r\n    //Course Dialog Box\r\n    const [course, setCourse] = useState({});\r\n    const [loadingCourse, setLoadingCourse] = useState(true);\r\n\r\n    //Update Dialog Box\r\n    const [user, setUser] = useState({});\r\n    const [loadingUserUpdate, setLoadingUserUpdate] = useState(true);\r\n\r\n    //Modal States and functions\r\n    // -> Course\r\n    const [showCourse, setShowCourse] = useState(false);\r\n    const handleShowCourse = () => setShowCourse(true);\r\n    const handleCloseCourse = () => setShowCourse(false);\r\n    // -> Update\r\n    const [showUpdate, setShowUpdate] = useState(false);\r\n    const handleShowUpdate = () => setShowUpdate(true);\r\n    const handleCloseUpdate = () => setShowUpdate(false);\r\n\r\n    const showCourses = (id) => {\r\n        handleShowCourse();\r\n\r\n        const fetchCourseData = async () => {\r\n            setLoadingCourse(true);\r\n            const result = await fetch(\"https://pre.bistrainer.com/v1/index.cfm?action=testapi.courses&id=\" + id);\r\n            const jsonData = await result.json();\r\n\r\n            setCourse(jsonData);\r\n            setLoadingCourse(false);\r\n        }\r\n        fetchCourseData();\r\n    }\r\n\r\n    const deleteUser = (id, apiData, setApiData) => {\r\n\r\n        if (window.confirm(`Are you sure you wish to delete User: ${id}?`)) {\r\n            setApiData({\r\n                success: apiData.success,\r\n                users: apiData.users.filter((user) => {\r\n                    return user.id !== id;\r\n                })\r\n            });\r\n        }\r\n    }\r\n\r\n    const updateUser = (id, apiData) => {\r\n        //Getting the user using id\r\n        setUser(\r\n            apiData.users.filter((user) => {\r\n                return user.id === id;\r\n            })\r\n        );\r\n\r\n        handleShowUpdate();\r\n        setLoadingUserUpdate(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{value.name}</td>\r\n                <td>{value.username}</td>\r\n                <td>{value.role}</td>\r\n                <td>{value.city}</td>\r\n                <td>{value.address}</td>\r\n                <td>{value.phone}</td>\r\n                <td>{value.email}</td>\r\n                <td>\r\n                    <Button variant=\"info\" onClick={() => showCourses(value.id)}><FaBookOpen /> Courses</Button>\r\n                    <UsersDataContext.Consumer>\r\n                        {({ usersApiData, setUsersApiData }) => (\r\n                            <>\r\n                                <Button variant=\"danger\" onClick={() => deleteUser(value.id, usersApiData, setUsersApiData)}><FaTrash /> Delete</Button>\r\n                                <Button variant=\"warning\" onClick={() => updateUser(value.id, usersApiData)}><FaUserEdit /> Edit</Button>\r\n                            </>\r\n                        )}\r\n                    </UsersDataContext.Consumer>\r\n                </td>\r\n            </tr>\r\n            {!loadingCourse && <Course handleClose={handleCloseCourse} show={showCourse} name={value.name} course={course} />}\r\n            {!loadingUserUpdate && <Update handleClose={handleCloseUpdate} show={showUpdate} user={user[0]}/>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default User;","import { useState, useEffect } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport { ValidateEmail, ValidatePhone } from './Tools';\r\nimport { Form, Col, Button } from 'react-bootstrap';\r\n\r\nconst Add = ( {usersApiData, setUsersApiData, handleClose, show} ) => {\r\n    //Initializing user info with values of user passed as props\r\n    const [userInfo, setUserInfo] = useState({\r\n        role:'',\r\n        city:'',\r\n        address:'',\r\n        phone:'',\r\n        username:'',\r\n        id:'',\r\n        email:'',\r\n        name:''\r\n    });\r\n\r\n    const [errors, setErrors] = useState({\r\n        emailError: '',\r\n        phoneError: '',\r\n        usernameError: '',\r\n        roleError: '',\r\n        nameError: '',\r\n        cityError: '',\r\n        addressError: '',\r\n    });\r\n\r\n    const checkErrors = () => {\r\n        if (errors.emailError || errors.phoneError || errors.usernameError ||\r\n            errors.roleError || errors.nameError || errors.cityError ||\r\n            errors.addressError || errors.addressError) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }    \r\n\r\n    const errorSetter = (errorKey, errorMessage) => {\r\n        setErrors(errors => ({ ...errors, [`${errorKey}`]: errorMessage }));\r\n    }\r\n\r\n    //For Validations\r\n    useEffect(() => {        \r\n        if (!userInfo.email) {\r\n            errorSetter(\"emailError\", \"Please provide an Email ID\");\r\n        } else if (userInfo.email && !ValidateEmail(userInfo.email)) {\r\n            errorSetter(\"emailError\", \"Email needs to be in format: mysite@domain.com\");\r\n        } else {\r\n            errorSetter(\"emailError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.phone) {\r\n            errorSetter(\"phoneError\", \"Please provide a Phone Number\");\r\n        } else if (userInfo.phone && !ValidatePhone(userInfo.phone)) {\r\n            errorSetter(\"phoneError\", \"Phone numbers needs to be in format: XXX XXX XXXX (Dashes/Dots/Spaces optional)\");\r\n        } else {\r\n            errorSetter(\"phoneError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.name) {\r\n            errorSetter(\"nameError\", \"Please provide a Name\");\r\n        } else {\r\n            errorSetter(\"nameError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.username) {\r\n            errorSetter(\"usernameError\", \"Please provide a Username\");\r\n        } else {\r\n            errorSetter(\"usernameError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.role) {\r\n            errorSetter(\"roleError\", \"Please provide a Role\");\r\n        } else {\r\n            errorSetter(\"roleError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.city) {\r\n            errorSetter(\"cityError\", \"Please provide a City\");\r\n        } else {\r\n            errorSetter(\"cityError\", \"\");\r\n        }\r\n\r\n        if (!userInfo.address) {\r\n            errorSetter(\"addressError\", \"Please provide an Address\");\r\n        } else {\r\n            errorSetter(\"addressError\", \"\");\r\n        }\r\n    }, [userInfo])\r\n\r\n    const addUser = () => {   \r\n        //Extracting users array\r\n        const usersArray = usersApiData.users;                               \r\n\r\n        if (!checkErrors()) {\r\n            if (window.confirm(`Add User (Name: ${userInfo.name}) - Confirm`)) {\r\n                usersArray.push(userInfo); //This also pushes new object into the array\r\n                \r\n                const updatedUsersApiData = {\r\n                    success: usersApiData.success,\r\n                    users: usersArray\r\n                }\r\n                setUsersApiData(updatedUsersApiData);                \r\n                handleClose();\r\n            }\r\n        } else {\r\n            window.alert(\"Please fix the errors before submitting.\");\r\n        }\r\n    }\r\n\r\n    return (                    \r\n                <Modal show={show} onHide={handleClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add a New User</Modal.Title>                        \r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <Form>\r\n                            <Form.Row>                                \r\n                                <Form.Group as={Col} controlId=\"formGridName\">\r\n                                    <Form.Label>Name</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Name\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        name: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.nameError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridUsername\">\r\n                                    <Form.Label>Username</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Username\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        username: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.usernameError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridEmail\">\r\n                                    <Form.Label>Email</Form.Label>\r\n                                    <Form.Control type=\"email\" placeholder=\"Enter Email\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        email: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.emailError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridPhone\">\r\n                                    <Form.Label>Phone Number</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Phone Number\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        phone: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.phoneError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridAddress\">\r\n                                    <Form.Label>Address</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Address\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        address: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.addressError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Form.Group as={Col} controlId=\"formGridCity\">\r\n                                    <Form.Label>City</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter City\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        city: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.cityError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                                <Form.Group as={Col} controlId=\"formGridRole\">\r\n                                    <Form.Label>Role</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Enter Role\" onChange={e => setUserInfo(prevState => ({\r\n                                        ...prevState,\r\n                                        role: e.target.value\r\n                                    }))} />\r\n                                    <Form.Text className=\"text-danger\">\r\n                                        {errors.roleError}\r\n                                    </Form.Text>\r\n                                </Form.Group>\r\n                            </Form.Row>\r\n                            <Form.Row>\r\n                                <Button variant=\"primary\" onClick={() => addUser()}>Add</Button>\r\n                            </Form.Row>\r\n                        </Form>\r\n                    </Modal.Body>\r\n                </Modal>\r\n    );\r\n}\r\n\r\nexport default Add;","import { useState } from 'react';\r\nimport User from './User';\r\nimport { Table, Button } from 'react-bootstrap';\r\nimport Add from './Add';\r\n\r\nconst UsersList = ({ usersApiData, setUsersApiData }) => {\r\n\r\n    //Add Dialog Box    \r\n    const [loadingUserAdd, setLoadingUserAdd] = useState(true);\r\n\r\n    // -> Add\r\n    const [showAdd, setShowAdd] = useState(false);\r\n    const handleShowAdd = () => setShowAdd(true);\r\n    const handleCloseAdd = () => setShowAdd(false);    \r\n\r\n    const addNewUser = () => {\r\n        handleShowAdd();                \r\n        setLoadingUserAdd(false);\r\n    }\r\n\r\n    return (\r\n        <div className=\"users-list\">\r\n            <Button variant=\"primary\" className=\"add-button\" onClick={() => addNewUser()}>Add New User</Button>\r\n            {(!loadingUserAdd) && <Add usersApiData={usersApiData} setUsersApiData={setUsersApiData} handleClose={handleCloseAdd} show={showAdd} />}\r\n            <Table striped bordered hover variant=\"light\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Username</th>\r\n                        <th>Role</th>\r\n                        <th>City</th>\r\n                        <th>Address</th>\r\n                        <th>Phone</th>\r\n                        <th>Email</th>\r\n                        <th>Options</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {\r\n                        usersApiData.users.map((user, key) => (\r\n                            <User key={key} value={user} />\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UsersList;","export default __webpack_public_path__ + \"static/media/loader.4b397384.gif\";","import Loader from '../images/loader.gif';\r\n\r\nconst LoadingScreen = () => {\r\n    return(\r\n        <div className=\"loading\">\r\n            <img src={Loader} alt=\"loader icon\" className=\"loader-gif\" />           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LoadingScreen;","export default __webpack_public_path__ + \"static/media/company_logo.cf97cffb.png\";","import BisLogo from '../images/company_logo.png';\r\nimport { FaUserAlt } from \"react-icons/fa\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <header>\r\n                <img src={BisLogo} alt=\"BIS Training Solutions Logo\" className=\"company-logo\" />\r\n            </header>\r\n            <div className=\"sub-heading\">\r\n                <h2><FaUserAlt/> Users List</h2>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","import { FaCopyright, FaFileAlt, FaCode, FaCertificate } from \"react-icons/fa\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <>\r\n            <footer>\r\n                <span><FaCopyright/> 2020</span>\r\n                <a href=\"http://www.google.com\"><FaFileAlt/> Terms and Conditions</a>\r\n                <a href=\"http://www.google.com\"><FaCode/> System Requirements</a>\r\n                <a href=\"http://www.google.com\"><FaCertificate/> Certificate Verification</a>\r\n            </footer>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\nimport UsersList from './components/UsersList';\nimport LoadingScreen from './components/LoadingScreen';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\nexport const UsersDataContext = React.createContext();\n\nconst App = () => {\n\n  const [usersApiData, setUsersApiData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const fetchUsersApiData = async () => {\n    const result = await fetch('https://pre.bistrainer.com/v1/index.cfm?action=testapi.users');\n    const jsonData = await result.json();\n\n    setUsersApiData(jsonData);\n    setLoading(false);\n  }\n\n  useEffect(() => {\n    fetchUsersApiData();\n  }, [])\n\n  return (\n    loading ? <LoadingScreen /> :\n      <>\n        <Header />\n        <div className=\"app\">\n          <UsersDataContext.Provider value={{ usersApiData, setUsersApiData}}>\n            <UsersList usersApiData={usersApiData} setUsersApiData={setUsersApiData} />\n          </UsersDataContext.Provider>\n        </div>\n        <Footer />\n      </>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(  \n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}